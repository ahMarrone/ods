{% extends 'base_explora.html.twig' %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('leaflet/leaflet.js') }}"></script>
    <!-- Load d3.js and c3.js -->
    <script type="text/javascript" src="{{ asset('d3/d3.js') }}" charset="utf-8"></script>
    <script type="text/javascript" src="{{ asset('c3/c3.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/underscore-min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/backbone-min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/map.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/nacion-simplified-1dot0-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/provincias-simplified-0dot5-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/departamentos-simplified-1dot0-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/sideChart.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/loadingModal.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/easy-button.js') }}"></script>
{% endblock %}    

{% block stylesheets %}
    {{ parent() }}
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="{{ asset('leaflet/leaflet.css') }}" />
    <link rel="stylesheet" href="{{ asset('css/miscStyle.css') }}" />
    <link rel="stylesheet" href="{{ asset('c3/c3.css') }}" />
    <link rel="stylesheet" href="{{ asset('css/easy-button.css') }}" />
{% endblock %}

{% block body %}

<div id=mainContainer>
<div class="container-fluid" id='divFluid' style="padding-top: 15px;">
<script id="formLoader" type="text/template">

<%_.mixin({
  trim: function(string, max) {
    var idx = string.indexOf(' ', 0);
    while ((idx < max) && (idx != -1)) {
      idx = string.indexOf(' ', idx + 1);
    }
    return (idx == -1) ? string : string.substring(0, idx) + '...';
  },

  trimByTheMiddle: function(string, max) {
    var half = Math.floor(max/2);
    var len = string.length;
    var result = string;
    var idx = half;

    if (max < len) {
      while (string[idx] != ' ') {
        idx++;
      }
      result = string.substring(0, idx) + '...';
      idx = len - half;
      while (string[idx] != ' ') {
        idx--;
      }
      result += string.substring(idx + 1, len);
    }
    return result;
  }
});%>
  <form class="form-horizontal" role="form">
    <div class="col-sm-6 col-lg-4">
      <div class="form-group">
        <label for="selectorObjetivo" class="col-md-3 control-label">Objetivo</label>
        <div class="col-md-9">
          <select id="selectorObjetivo" class="form-control selectObjetivo">
          <% _.each(model.get("objetivos"), function( objetivo, i){ %>
          <option title="<%= objetivo.descripcion %>" value="<%= objetivo.id %>" <% if (objetivo.id == model.get("idObjetivoSeleccionado")) { %> selected<% }  %>><%= _(objetivo.descripcion).trimByTheMiddle(25) %></option>
          <% }); %>
          </select>
        </div>
      </div> <!-- /.form-group -->
    </div> <!-- /.col-sm-6 col-lg-4 -->
    <div class="col-sm-6 col-lg-4">
      <div class="form-group">
        <label for="selectorMeta" class="col-md-3 control-label">Meta</label>
        <div class="col-md-9">
          <select id="selectorMeta" class="form-control selectMeta">
          <% _.each(model.get("metas"), function( meta, i){ %>',
          <% if ( meta.id_objetivo == model.get("idObjetivoSeleccionado") ){ %>
          <option title="<%= meta.descripcion %>" value="<%= meta.id %>" <% if (meta.id == model.get("idMetaSeleccionada")) { %> selected<% }  %>><%= _(meta.descripcion).trim(30) %></option>
          <% } %>
          <% }); %>
          </select>
        </div>
      </div> <!-- /.form-group -->
    </div> <!-- /.col-sm-6 col-lg-4 -->
    <div class="col-sm-6 col-lg-4">
      <div class="form-group">
        <label for="selectorIndicador" class="col-md-3 control-label">Indicador <% if (model.get('indicadores')[model.get('idIndicadorSeleccionado')].documentoTecnico) { %><a target="_blank" href="<%= model.get('rutaDocumentosTecnicos').concat(model.get('indicadores')[model.get('idIndicadorSeleccionado')].documentoTecnico)%>" class="fa fa-question-circle" title="Documento Técnico"></a><% } %></label>
        <div class="col-md-9">
          <select id="selectorIndicador" class="form-control selectIndicador">
          <% _.each(model.get("indicadores"), function( indicador, i){ %>
          <% if ( indicador.id_meta == model.get("idMetaSeleccionada") ){ %>
          <option option title="<%= indicador.descripcion %>" value="<%= i %>" <% if (i == model.get("idIndicadorSeleccionado")) { %> selected<% }  %>><%= _(indicador.descripcion ).trim(30) %></option>
          <% } %>
          <% }); %>
          </select>
        </div>
      </div> <!-- /.form-group -->
    </div> <!-- /.col-sm-6 col-lg-4 -->
    <div class="col-sm-6 col-lg-4">
      <div class="form-group">
        <label for="selectorAnio" class="col-md-3 control-label">Año</label>
        <div class="col-md-9">
          <select id="selectorAnio" class="form-control selectFecha">
          <% _.each(model.get("valoresIndicadoresDesgloses"), function(e, f){ %>',
          <option title="<%= f %>" value="<%= f %>" <% if (f == model.get("fechaSeleccionada")) { %> selected<% }  %>><%= f %></option>
          <% }); %>
          </select>
        </div>
      </div> <!-- /.form-group -->
    </div> <!-- /.col-sm-6 col-lg-4 -->
    <div class="col-sm-6 col-lg-4">
      <div class="form-group">
        <label for="selectorDesglose" class="col-md-3 control-label">Desglose</label>
        <div class="col-md-9">
          <select id="selectorDesglose" class="form-control selectDesglose">
          <% _.each(model.get("desgloses"), function(desglose, i){ %>
          <!-- MODIFICAR PARA USAR BÚSQUEDA BINARIA  -->
          <% if ( _.indexOf(model.get("valoresIndicadoresDesgloses")[model.get("fechaSeleccionada")].id_desgloses, desglose.id) != -1 ){ %>
          <option title="<%= desglose.descripcion %>" value="<%= desglose.id %>"<% if (desglose.id == model.get("desgloseSeleccionado")) { %> selected<% } %>><%= desglose.descripcion %></option>
          <% } %>
          <% }); %>
          </select>
        </div>
      </div> <!-- /.form-group -->
    </div> <!-- /.col-sm-6 col-lg-4 -->
    <div class="col-sm-6 col-lg-4">
      <div class="form-group">
        <label for="selectorEtiqueta" class="col-md-3 control-label">Etiqueta</label>
        <div class="col-md-9">
          <% if ( model.get("desgloseSeleccionado") == 0 ) { %>
          <select disabled id="selectorEtiqueta" class="form-control selectEtiqueta">
          <% } else { %>
          <select id="selectorEtiqueta" class="form-control selectEtiqueta">
          <% } %>
          <% model.set('etiquetasActuales', []) %>
          <% _.each(model.get("etiquetas"), function(e, id){ %>
          <% if ( e.id_desglose == model.get("desgloseSeleccionado") ){ %>
          <% model.get('etiquetasActuales').push(id); %>
          <option title="<%= e.descripcion %>" value="<%= id %>" <% if ( e.descripcion == "Total" ) { model.set('etiquetaSeleccionada', id ) %> selected<% } %>><% if ( id != 0 ) { %> <%= e.descripcion %> <% } %></option>
          <% } %>
          <% }); %>
          </select>
        </div>
      </div> <!-- /.form-group -->
    </div> <!-- /.col-sm-6 col-lg-4 -->
  </form>  
</script>
</div>

<div class="container-fluid mapCanvas" id="mapCanvas"></div>

<table class="table table-responsive" id='fechasDestacadasDiv'>
<script id="fechasDestacadasLoader" type="text/template">
<tbody>
    <tr>
      <!-- <td  style="padding-top: 0px; background-color: #DFF6FF;padding-bottom: 0px"> -->
      <td>
      <div class="text-center" id='fechasDestacadasDiv'>
        <div class="btn-group " role="group" aria-label="">
          <% _.each(model.get("fechasDestacadas"), function(fecha, i) { %>
          <input type="button" value="<%= fecha %>" class="ButtonFechaDestacada btn btn-primary sharp <% if (fecha == model.get('fechaSeleccionada')) { print ('active'); } %>">
          <% }); %>
        </div>  
      </div>
      </td>
    </tr>
</script>
</table>

<!-- Modal Exportar -->
<div class="modal fade" id="exportarModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content text-center">
    <!--  -->
    <!-- /export/?id_indicador=getIdIndicador() -->
    <form name="exportar" class="form-horizontal" method="POST" onsubmit="postAction(this);" id="formExportModal">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">Seleccione una opción</h4>
      </div>
      <div class="modal-body">
      <div class="form-group">
        <div class="radio">
        <!-- IdIndicador puede ir en 'value' -->
            <label><input type="radio" id="pdfRadio" name="exportar" onclick="hideDiv()" checked="checked">PDF (Mapa)</label>
        </div>
        <div class="radio">
          <label><input type="radio" id="csvRadio" name="exportar" onclick="showDiv()">CSV (Datos)</label>
        </div>
        <div id="checkboxExportarDiv" class="checkbox" style="display:none;">
          <label><input type="checkbox" name="todos" value="1">Todos los años disponibles</label>
      </div>
      </div>
    </div>
      <div class="modal-footer">
        <div class="col-sm-6 col-md-4 col-md-offset-3">
        <!-- <input class="btn btn-primary color" type="submit" name="exportar" id="botonExportar" value="Exportar"> -->
          <button type="submit" class="btn btn-primary"><i class="fa fa-download fa-lg"></i> Exportar</button>
        </div>
      </div>
    </form>
    </div>
  </div>
</div>

</div>

<script type="text/javascript">
  function showDiv() {
    document.getElementById('checkboxExportarDiv').style.display = "block";
 }
  function hideDiv() {
    document.getElementById('checkboxExportarDiv').style.display = "none";
 }
  function postAction(form) {
    var idIndicador = $('#selectorIndicador').val()
    form.action = "export?id_indicador=" + idIndicador;
 }
 $('#formExportModal').submit(function() {
    if ($('#pdfRadio', this).is(':checked')) {
      alert('Descargo el mapa!');
      // $('#exportarModal').modal('hide');
      return false;
    }
});
 // $('#myModal').off('hidden.bs.modal').on('hide.bs.modal', function () {
 $('#exportarModal').on('hide.bs.modal', function () {
   $('#checkboxExportarDiv').hide();
});
</script>

<script type="text/javascript">
  $(document).ready(function() {

    var ChainSelectData = Backbone.Model.extend({
      defaults: {
        'objetivos':[],
        'metas':[],
        'indicadores':[],
        'valoresIndicadoresDesgloses': [],
        'desgloses': [],
        'etiquetas': [],
        'etiquetasActuales': [],
        'fechasDestacadas': [],
        'idObjetivoSeleccionado': null,
        'idMetaSeleccionada': null,
        'idIndicadorSeleccionado': null,
        'fechaSeleccionada': null,
        'rutaDocumentosTecnicos': "{{ asset('uploads/indicadores/') }}",
      }
    });

    var ChainSelectView = Backbone.View.extend({
      el: '#divFluid', /* Donde quiero renderizar */
      template: _.template($('#formLoader').html()), /* Lo que quiero renderizar */

      initialize: function() {
        var idIndicadorSeleccionado = this.model.get('idIndicadorSeleccionado');
        var indicador = this.model.get('indicadores');
        var fechaSeleccionada = this.model.get('fechaSeleccionada');
        var valoresIndicadoresDesgloses = this.model.get('valoresIndicadoresDesgloses');
        var valoresRefGeografica = valoresIndicadoresDesgloses[fechaSeleccionada].valoresRefGeografica;
        var etiquetas = this.model.get('etiquetas');

        /* Primer elemento de la lista de desgloses para una fecha definida */
        var desgloseSeleccionado = valoresIndicadoresDesgloses[fechaSeleccionada].id_desgloses[0];
        this.model.set('desgloseSeleccionado', desgloseSeleccionado);

        /* Eventos a monitorizar */
        this.model.on('change:idObjetivoSeleccionado', this.render, this);
        this.model.on('change:idMetaSeleccionada', this.render, this);
        this.model.on('change:idIndicadorSeleccionado', this.render, this);
        this.model.on('change:fechaSeleccionada', this.anioSelected, this);
        this.model.on('change:desgloseSeleccionado', this.render, this);
        this.render();

        /* Se instancian luego de la ejecución de render() */
        var idEtiquetaSeleccionada = this.model.get('etiquetaSeleccionada');
        var etiquetasActuales = this.model.get('etiquetasActuales');

        /* Inicializar mapa */
        swap(indicadores[idIndicadorSeleccionado], etiquetas, valoresIndicadoresDesgloses);
        update(valoresRefGeografica, idEtiquetaSeleccionada, etiquetasActuales);

        },
        events: {
                  'change .selectObjetivo': 'objetivoSelected',
                  'change .selectMeta': 'metaSelected',
                  'change .selectIndicador': 'indicadorSelected',
                  'change .selectFecha': 'anioSelected',
                  'change .selectDesglose': 'desgloseSelected',
                  'change .selectEtiqueta': 'etiquetaSelected',
        },
        render:function(){
          // var tpl = _.template(template_select);
          // this.$el.html(tpl({model:this.model}));
          // this.$el.html(this.template({model:this.model}));
          this.$el.html(this.template({model:this.model}));
          return this;
        },
        objetivoSelected: function(event){
          this.model.set("idObjetivoSeleccionado", event.target.value); 
          this.metaSelected();
        },
        metaSelected: function(e){
          this.model.set("idMetaSeleccionada", $(this.el).find('.selectMeta').val());
            if (this.model.get('indicadores').length){
                this.indicadorSelected();
            }
        },
        indicadorSelected: function(e) {
          /* Actualizar datos, ir a buscarlos y refrescar */
          /* Bloquear pantalla hasta tanto no se hayan recuperado los datos */

          var idIndicadorSeleccionado = this.model.get('idIndicadorSeleccionado');
          var metas = this.model.get('metas');
          var indicadores = this.model.get('indicadores');
          var idMeta = indicadores[idIndicadorSeleccionado].id_meta;
          var idObjetivo = metas[idMeta].id_objetivo;

          var idIndicador = $(this.el).find('.selectIndicador').val();
          var url = api_urls.refresh + '?id_indicador='+ idIndicador;
          var data;
          var that = this;
          // setTimeout(function () {waitingDilog.hide();}, 3000);
          waitingDialog.show('Aguarde un momento por favor...');
          $.ajax(url, {
                'type': 'GET',
                'processData': false,
                'contentType': 'application/json',
                 success: function(data) {
                  var indicador = that.model.get('indicadores')[idIndicador];
                  var desgloses = data['desgloses'];
                  var etiquetas = data['etiquetas'];
                  var valoresIndicadoresDesgloses = data['valoresIndicadoresDesgloses'];
                  var fechasDestacadas = data['fechasDestacadas'];
                  var fechaSeleccionadaAnterior = that.model.get('fechaSeleccionada');

                  if ($.isEmptyObject(valoresIndicadoresDesgloses)) {
                    that.model.set(idObjetivoSeleccionado, idObjetivo);
                    that.model.set(idObjetivoSeleccionado, idMeta);
                    $(that.el).find('.selectIndicador').val(idIndicadorSeleccionado);
                    alert('El Indicador seleccionado aún no posee datos disponibles');
                  } else {
                    /* Actualizar variables del Modelo */
                    that.model.set('idIndicadorSeleccionado', idIndicador);
                    that.model.set('desgloses', desgloses);
                    that.model.set('etiquetas', etiquetas);
                    that.model.set('valoresIndicadoresDesgloses', valoresIndicadoresDesgloses);
                    that.model.set('fechasDestacadas', fechasDestacadas);
                    
                    swap(indicador, etiquetas, valoresIndicadoresDesgloses);

                    if (fechasDestacadas.length > 0) {
                      fechaSeleccionada = fechasDestacadas[0];
                    } else {
                      fechaSeleccionada = Object.keys(valoresIndicadoresDesgloses)[0];
                    }
                    that.model.unset('fechaSeleccionada', {silent: true});
                    that.model.set('fechaSeleccionada', fechaSeleccionada);
                  }
                  waitingDialog.hide();
                 },
                 error: function(data) {
                  that.model.set(idObjetivoSeleccionado, idObjetivo);
                  that.model.set(idObjetivoSeleccionado, idMeta);
                  $(that.el).find('.selectIndicador').val(idIndicadorSeleccionado);
                  alert('Ha ocurrido un error. Por favor, intente nuevamente');
                  waitingDialog.hide();
                },
          });
        },
        fechaClicked: function(event) {
          this.model.set("fechaSeleccionada", $(this.el).find('.selectFecha').val()); 
          // console.log("desde select" + this.model.get("fechaSeleccionada"));
          this.render();
        },
        anioSelected: function(event){
          if (event.target) {
            this.model.set("fechaSeleccionada", $(this.el).find('.selectFecha').val());
            // this.model.set("fechaSeleccionada", event.target.value);
          }
          this.render();
          this.desgloseSelected();
        },
        desgloseSelected: function(event) {
          this.model.set("desgloseSeleccionado", $(this.el).find('.selectDesglose').val()); 
          this.etiquetaSelected();
        },
        etiquetaSelected: function(event) {
          this.model.set("etiquetaSeleccionada", $(this.el).find('.selectEtiqueta').val());

          var fechaSeleccionada = this.model.get('fechaSeleccionada');
          var valoresRefGeografica = this.model.get('valoresIndicadoresDesgloses')[fechaSeleccionada].valoresRefGeografica;
          var idEtiquetaSeleccionada = this.model.get('etiquetaSeleccionada');
          var etiquetasActuales = this.model.get('etiquetasActuales');
          update(valoresRefGeografica, idEtiquetaSeleccionada, etiquetasActuales);
        }
    })

    var FechasDestacadasView = Backbone.View.extend({
      el: '#fechasDestacadasDiv',
      template: _.template($('#fechasDestacadasLoader').html()),
      initialize: function() {
        this.model.on('change:fechaSeleccionada', this.render, this);
        this.render();
        },
        events: {'click .ButtonFechaDestacada': 'fechaDestacadaClicked'},
        render:function(){
          this.$el.html(this.template({model:this.model}));
          return this;
        },
        fechaDestacadaClicked: function(event){
          this.model.set("fechaSeleccionada", event.target.value);
        }
    })

    /* Incializar Mapa */
    mapMe(poligonoNacion, poligonoProvincias, poligonoDepartamentos);

    var objetivos = {{ objetivos|json_encode|raw }};
    var metas = {{ metas|json_encode|raw }};
    var indicadores = {{ indicadores|json_encode|raw }};
    var valoresIndicadoresDesgloses = {{ valoresIndicadoresDesgloses|json_encode|raw }};
    var desgloses = {{ desgloses|json_encode|raw }};
    var etiquetas = {{ etiquetas|json_encode|raw }};
    var idIndicadorSeleccionado = {{ idIndicadorSeleccionado }};
    var idObjetivoSeleccionado = {{ idObjetivoSeleccionado }};
    var idMetaSeleccionada = {{ idMetaSeleccionada }};
    var api_urls = {{ api_urls|json_encode|raw }};
    var fechasDestacadas = indicadores[idIndicadorSeleccionado].fechasDestacadas;
    var fechaSeleccionada;

    /* Primer 'período' a mostrar: El primero de los años destacados o si ninguno de 
    estos ha sido definido, el año más lejano a la actualidad de los valores recuperados */

    if (fechasDestacadas.length > 0) {
      fechaSeleccionada = fechasDestacadas[0];
    } else {
      fechaSeleccionada = Object.keys(valoresIndicadoresDesgloses)[0];
    }

    if ($.isEmptyObject(valoresIndicadoresDesgloses)) {
      waitingDialog.show('El Indicador seleccionado aún no posee datos disponibles',{onHide: function () {alert('Redirecionado!');}});
      // setTimeout(function () {waitingDialog.hide();}, 3000);
    } else {
      var modelForm = new ChainSelectData({
        'objetivos': objetivos,
        'metas': metas,
        'indicadores': indicadores,
        'valoresIndicadoresDesgloses': valoresIndicadoresDesgloses,
        'desgloses': desgloses,
        'etiquetas': etiquetas,
        'fechasDestacadas': fechasDestacadas,
        'idObjetivoSeleccionado': idObjetivoSeleccionado,
        'idMetaSeleccionada': idMetaSeleccionada,
        'idIndicadorSeleccionado': idIndicadorSeleccionado,
        'fechaSeleccionada': fechaSeleccionada
      });

      // var view = new ThreeSelectView({el: $("#selects"), model:model});
      var viewForm = new ChainSelectView({model:modelForm});
      var viewFechasDestacadas = new FechasDestacadasView({model:modelForm});
    }
  });
</script>


<!-- http://gis.stackexchange.com/questions/41928/adding-removing-leaflet-geojson-layers -->
<!-- http://gis.stackexchange.com/questions/68941/how-to-add-remove-legend-with-leaflet-layers-control -->

<!-- http://stackoverflow.com/questions/133925/javascript-post-request-like-a-form-submit -->
<!-- http://stackoverflow.com/questions/27447755/can-you-set-a-javascript-function-name-as-an-html-attribute -->
<!-- http://stackoverflow.com/questions/15279716/form-inside-the-modal-bootstrap -->
<!-- http://stackoverflow.com/questions/13010411/symfony2-force-file-download -->
{% endblock %}