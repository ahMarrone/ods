{% extends 'base_explora.html.twig' %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('leaflet/leaflet.js') }}"></script>
    <!-- Load d3.js and c3.js -->
    <script type="text/javascript" src="{{ asset('d3/d3.js') }}" charset="utf-8"></script>
    <script type="text/javascript" src="{{ asset('c3/c3.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/underscore-min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/backbone-min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/map.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/nacion-simplified-1dot0-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/provincias-simplified-0dot5-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/departamentos-simplified-1dot0-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/sideChart.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/loadingModal.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/easy-button.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/modalOnSteroids.js') }}"></script>
{% endblock %}    

{% block stylesheets %}
    {{ parent() }}
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="{{ asset('leaflet/leaflet.css') }}" />
    <link rel="stylesheet" href="{{ asset('css/estilo_explora.css') }}" />
    <link rel="stylesheet" href="{{ asset('c3/c3.css') }}" />
    <link rel="stylesheet" href="{{ asset('css/easy-button.css') }}" />
{% endblock %}

{% block body %}

<div id="mainContainer">
<div class="container-fluid">
<div class="row">
<div class = "col-sm-4">
<div class="container-fluid" id='divFluid'>
<script id="formLoader" type="text/template">
<%_.mixin({
  trim: function(string, max) {
    var idx = string.indexOf(' ', 0);
    while ((idx < max) && (idx != -1)) {
      idx = string.indexOf(' ', idx + 1);
    }
    return (idx == -1) ? string : string.substring(0, idx) + '...';
  },

  trimByTheMiddle: function(string, max) {
    var half = Math.floor(max/2);
    var len = string.length;
    var result = string;
    var idx = half;

    if (max < len) {
      while (string[idx] != ' ') {
        idx++;
      }
      result = string.substring(0, idx) + '...';
      idx = len - half;
      while (string[idx] != ' ') {
        idx--;
      }
      result += string.substring(idx + 1, len);
    }
    return result;
  }
});%>
<form class="form-horizontal" role="form">
      <h3 class="text-center" style="color: #0c4da2;margin-top: 10px;text-transform: uppercase;">Plataforma De Seguimiento De Los Objetivos De Desarrollo Sostenible</h3>
      <div class="form-group">
        <label for="selectorObjetivo" control-label">Objetivo</label>
          <select id="selectorObjetivo" class="form-control selectObjetivo" title="<% if (model.get('idObjetivoSeleccionado') != -1) { %><%= model.get('objetivos')[model.get('idObjetivoSeleccionado')].descripcion %><% } %>">
          <% if (model.get("idObjetivoSeleccionado") == -1) { %>
          <option title="<Seleccionar un Objetivo>" value="-1">&#60; Seleccionar un Objetivo &#62;</option>
          <% } %>
          <% _.each(model.get("objetivos"), function(objetivo, i){ %>
          <option title="<%= objetivo.codigo %> - <%= objetivo.descripcion %>" value="<%= i %>" <% if (i == model.get("idObjetivoSeleccionado")) { %> selected<% }  %>><% if (objetivo.codigo) { print (objetivo.codigo + " - " ); } %><%= _(objetivo.descripcion).trim(42) %></option>
          <% }); %>
          </select>
      </div> <!-- /.form-group -->
      <div class="form-group">
        <label for="selectorMeta" class="control-label">Meta</label>
          <select <% if ((model.get('idObjetivoSeleccionado') == -1)) { print ('disabled'); } %> id="selectorMeta" class="form-control selectMeta" title="<% if (model.get('idxMetaSeleccionada') != -1) { %><%= model.get('metas')[model.get('idxMetaSeleccionada')].descripcion %><% } %>">
          <% if (model.get("idxMetaSeleccionada") == -1) { %>
          <option title="Seleccionar una Meta" value="-1">&#60; Seleccionar una Meta &#62; </option>
          <% } %>
          <% _.each(model.get("metas"), function(meta, i){ %>
          <% if ( meta.id_objetivo == model.get("idObjetivoSeleccionado") ){ %>
          <option title="<%= meta.codigo %> - <%= meta.descripcion %>" value="<%= i %>" id="<%= meta.id %>" <% if (i == model.get("idxMetaSeleccionada")) { %> selected<% }  %>><%= meta.codigo %> - <%= _(meta.descripcion).trim(42) %></option>
          <% } %>
          <% }); %>
          </select>
      </div> <!-- /.form-group -->
      <div class="form-group">
        <label for="selectorIndicador" class="control-label">Indicador <% if (model.get("idIndicadorSeleccionado") != -1) { %>
        <% if (model.get('indicadores')[model.get('idIndicadorSeleccionado')].documentoTecnico) { %><a target="_blank" href="<%= model.get('rutaDocumentosTecnicos').concat(model.get('indicadores')[model.get('idIndicadorSeleccionado')].documentoTecnico)%>" class="fa fa-info-circle" title="Ficha Técnica"></a><% } %>
        <% } %></label>
          <select <% if (model.get("idxMetaSeleccionada") == -1) { print ('disabled'); } %> id="selectorIndicador" class="form-control selectIndicador" title="<% if (model.get("idIndicadorSeleccionado") != -1) { %><%= model.get('indicadores')[model.get('idIndicadorSeleccionado')].descripcion %><% } %>">
          <% if (model.get("idIndicadorSeleccionado") == -1) { %>
          <option title="Seleccionar un Indicador" value="-1" id="-1">&#60; Seleccionar un Indicador &#62; </option>
          <% } %>
          <% model.set("indicadoresDisponibles", 0) %>
          <% _.each(model.get("indicadores"), function( indicador, i){ %>
          <% if ( indicador.id_meta == model.get("idMetaSeleccionada") ){ %>
          <% model.set("indicadoresDisponibles", model.get("indicadoresDisponibles") + 1) %>
          <option option title="<%= indicador.codigo %>-<%= indicador.descripcion %>" value="<%= i %>" id="<%= indicador.id %>" <% if (i == model.get("idIndicadorSeleccionado")) { %> selected<% }  %>><%= indicador.codigo %> - <%= _(indicador.descripcion ).trim(42) %></option>
          <% } %>
          <% }); %>
          </select>
      </div> <!-- /.form-group -->
      <div class="form-group">
        <label for="selectorAnio" class="control-label">Año</label>
          <select <% if (_.isEmpty(model.get('valoresIndicadoresDesgloses'))) { print ('disabled'); } %> id="selectorAnio" class="form-control selectFecha">
          <% _.each(model.get("valoresIndicadoresDesgloses"), function(e, f){ %>',
          <option title="<%= f %>" value="<%= f %>" <% if (f == model.get("fechaSeleccionada")) { %> selected<% }  %>><%= f %></option>
          <% }); %>
          </select>
      </div> <!-- /.form-group -->
      <div class="form-group">
        <label for="selectorDesglose" class="control-label">Desglose <i class="fa fa-question-circle" aria-hidden="true" title="Separación de los valores del indicador de acuerdo a diferentes criterios desagregados que permiten una vista más detallada de la información (Por ejemplo, desglose por 'sexo', 'edad', etc.)"></i></label>
          <select <% if (_.isEmpty(model.get('desgloses'))) { print ('disabled'); } %> id="selectorDesglose" class="form-control selectDesglose">
          <% _.each(model.get("desgloses"), function(desglose, i){ %>
          <!-- MODIFICAR PARA USAR BÚSQUEDA BINARIA  -->
          <% if ( _.indexOf(model.get("valoresIndicadoresDesgloses")[model.get("fechaSeleccionada")].id_desgloses, desglose.id) != -1 ){ %>
          <option title="<%= desglose.descripcion %>" value="<%= desglose.id %>"<% if (desglose.id == model.get("desgloseSeleccionado")) { %> selected<% } %>><%= desglose.descripcion %></option>
          <% } %>
          <% }); %>
          </select>
      </div> <!-- /.form-group -->
      <div class="form-group">
        <label for="selectorEtiqueta" class="control-label">Etiqueta <i class="fa fa-question-circle" aria-hidden="true" title=" Cada una de las desagregaciones posibles para un desglose particular (Por ejemplo, para el desglose 'sexo', las etiquetas son: 'femenino', 'masculino' y ' total')."></i></label>
          <select <% if ((model.get("desgloseSeleccionado") == 0) || (_.isEmpty(model.get('etiquetas')))) { print ('disabled'); } %> id="selectorEtiqueta" class="form-control selectEtiqueta">
          <% model.set('etiquetasActuales', []) %>
          <% _.each(model.get("etiquetas"), function(e, id){ %>
          <% if ( e.id_desglose == model.get("desgloseSeleccionado") ){ %>
          <% model.get('etiquetasActuales').push(id); %>
          <option title="<%= e.descripcion %>" value="<%= id %>" <% if ( e.descripcion.toLowerCase() == "total" ) { model.set('etiquetaSeleccionada', id ) %> selected<% } %>><% if ( id != 0 ) { %> <%= e.descripcion %> <% } %></option>
          <% } %>
          <% }); %>
          </select>
      </div> <!-- /.form-group -->
    </form>  
    </script>
    </div>
</div>
<div class = "col-sm-8">
<div class="container-fluid mapCanvas" id="mapCanvas"></div>    
<table class="table table-responsive" id='fechasDestacadasDiv' style="margin-bottom: 0px;">
<script id="fechasDestacadasLoader" type="text/template">
<tbody>
    <tr>
      <!-- <td  style="padding-top: 0px; background-color: #DFF6FF;padding-bottom: 0px"> -->
      <td>
      <div class="text-center" id='fechasDestacadasDiv'>
        <div class="btn-group " role="group" aria-label="">
          <% _.each(model.get("fechasDestacadas"), function(fecha, i) { %>
          <input type="button" value="<%= fecha %>" class="ButtonFechaDestacada btn btn-primary sharp <% if (fecha == model.get('fechaSeleccionada')) { print ('active'); } %>">
          <% }); %>
        </div>  
      </div>
      </td>
    </tr>
</script>
</table>
</div>
</div>
</div>

<!-- Modal Exportar -->
<div class="modal fade" id="exportarModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content text-center">
    <form name="exportar" class="form-horizontal" method="POST" id="formExportModal">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">Seleccione una opción</h4>
      </div>
      <div class="modal-body">
      <div class="form-group">
        <div class="radio">
          <label><input type="radio" id="csvRadio" name="exportar" onclick="showDiv()">CSV (Datos)</label>
        </div>
        <div id="checkboxExportarDiv" class="checkbox" style="display:none;">
          <label><input type="checkbox" name="todos" value="1">Todos los años disponibles</label>
      </div>
      </div>
    </div>
      <div class="modal-footer">
        <div class="col-sm-6 col-md-4 col-md-offset-3">
          <button type="submit" class="btn btn-primary"><i class="fa fa-download fa-lg"></i> Exportar</button>
        </div>
      </div>
    </form>
    </div>
  </div>
</div>

<!-- Modal Bienvenidos -->
<div class="modal fade" id="bienvenidosModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">
  <div class="modal-dialog" role="document">
    <div class="modal-content text-center">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h2 class="modal-title" id="myModalLabel">¡Bienvenidos!</h2>
      </div>
      <div class="modal-body">
      <h3 style="text-transform: uppercase;">Plataforma de Seguimiento de los <br> Objetivos de Desarrollo Sostenible</h3>
      </div>
      <!-- <div class="modal-footer">
      </div> -->
    </div>
  </div>
</div>

<div class="modal fade" id="sideChartModal" tabindex="-1" role="dialog" aria-labelledby="sideChartModalLabel" aria-hidden="true" style="padding-top:10%; overflow-y:visible;">
  <div class="modal-dialog" role="document">
    <div class="modal-content text-center">
      <div class="modal-header">
          <h3 class="modal-title" id="myModalLabel"></h3>
      </div>
      <div class="modal-body">
        <!-- <div style="background-color: rgba(245,245,245,0.8);"> -->
        <div id="modal-line-chart" class="c3 line-chart"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="globalModal" class="modal fade bs-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" style="padding-top:15%; overflow-y:visible;">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content text-center">
      <div class="modal-header text-center">
        <h3 style="margin:0;">
          <i class="fa fa-exclamation-triangle" aria-hidden="true" style="color: red"></i> Aviso Importante
        </h3>
      </div>
      <div class="modal-body">
    </div>
    </div>
  </div>
</div>
</div>

<script type="text/javascript">
  var api_urls = {{ api_urls|json_encode|raw }};
  $(document).ready(function() {

    $('#bienvenidosModal').modal('show')

    /* INICIALIZAR DE ACUERDO A TIPO */
    var ChainSelectData = Backbone.Model.extend({
      defaults: {
        'objetivos':[],
        'metas':[],
        'indicadores':[],
        'valoresIndicadoresDesgloses': [],
        'desgloses': [],
        'etiquetas': [],
        'etiquetasActuales': [],
        'fechasDestacadas': [],
        'idObjetivoSeleccionado': -1,
        'idxMetaSeleccionada': -1,
        'idMetaSeleccionada': -1,
        'idIndicadorSeleccionado': -1,
        'fechaSeleccionada': null,
        'fechasDestacadas': [],
        'rutaDocumentosTecnicos': "{{ asset('uploads/indicadores/') }}",
        'indicadoresDisponibles': 0
      }
    });

    var ChainSelectView = Backbone.View.extend({
      el: '#divFluid', /* Donde quiero renderizar */
      template: _.template($('#formLoader').html()), /* Lo que quiero renderizar */

      initialize: function() {
        if (this.model.get('idIndicadorSeleccionado') != -1) {
          var idIndicadorSeleccionado = this.model.get('idIndicadorSeleccionado');
          var indicador = this.model.get('indicadores')[idIndicadorSeleccionado];
          var fechaSeleccionada = this.model.get('fechaSeleccionada');
          var valoresIndicadoresDesgloses = this.model.get('valoresIndicadoresDesgloses');
          var valoresRefGeografica = valoresIndicadoresDesgloses[fechaSeleccionada].valoresRefGeografica;
          var etiquetas = this.model.get('etiquetas');

          /* Primer elemento de la lista de desgloses para una fecha definida */
          var desgloseSeleccionado = valoresIndicadoresDesgloses[fechaSeleccionada].id_desgloses[0];
          this.model.set('desgloseSeleccionado', desgloseSeleccionado);
        }
        
        /* Eventos a monitorizar */
        /* VER SI ES POSIBLE REALIZAR UN MAP */
        this.model.on('change:idObjetivoSeleccionado', this.render, this);
        this.model.on('change:idxMetaSeleccionada', this.render, this);
        this.model.on('change:idIndicadorSeleccionado', this.render, this);
        this.model.on('change:fechaSeleccionada', this.anioSelected, this);
        this.model.on('change:desgloseSeleccionado', this.render, this);
        this.render();

        if (this.model.get('idIndicadorSeleccionado') != -1) {
          /* Se instancian luego de la ejecución de render() */
          var etiquetasActuales = this.model.get('etiquetasActuales');

          /* En el caso en que no se agregue la etiqueta 'Total' o se encuentre mal escrita */
          if (typeof this.model.get('etiquetaSeleccionada') === 'undefined') {
            this.model.set('etiquetaSeleccionada', etiquetasActuales[0])
          }
        
          var idEtiquetaSeleccionada = this.model.get('etiquetaSeleccionada');
          var escalaColores = indicador.escala;
          
          /* Inicializar mapa */
          swap(indicador, etiquetas, valoresIndicadoresDesgloses);
          update(valoresRefGeografica, idEtiquetaSeleccionada, etiquetasActuales);

        } else {
          /* Inicializar mapa */
          swap();
          update();
        }
      },
        events: {
                  'change .selectObjetivo': 'objetivoSelected',
                  'change .selectMeta': 'metaSelected',
                  'change .selectIndicador': 'indicadorSelected',
                  'change .selectFecha': 'anioSelected',
                  'change .selectDesglose': 'desgloseSelected',
                  'change .selectEtiqueta': 'etiquetaSelected',
        },
        render:function(){
          // var tpl = _.template(template_select);
          // this.$el.html(tpl({model:this.model}));
          // this.$el.html(this.template({model:this.model}));
          this.$el.html(this.template({model:this.model}));
          return this;
        },
        objetivoSelected: function(event) {
          this.model.set("idxMetaSeleccionada", -1);
          this.model.set("idMetaSeleccionada", -1);
          this.model.set("idObjetivoSeleccionado", event.target.value);
          this.metaSelected();
        },
        metaSelected: function(e) {
          this.model.set("idxMetaSeleccionada", $(this.el).find('.selectMeta').val());
          this.model.set("idMetaSeleccionada", $(this.el).find('.selectMeta').children(':selected').attr('id'));
          this.model.set("idIndicadorSeleccionado", -1)
          this.indicadorSelected();
        },
        indicadorSelected: function(e) {
          /* Actualizar datos, ir a buscarlos y refrescar */
          /* Bloquear pantalla hasta tanto no se hayan recuperado los datos */

          var idMeta = $(this.el).find('.selectMeta').val();
          // var idIndicador = $(this.el).find('.selectIndicador').val();
          var idxIndicador = $(this.el).find('.selectIndicador').val();
          var idIndicador = $(this.el).find('.selectIndicador').children(':selected').attr('id');
          var indicadoresDisponibles = this.model.get("indicadoresDisponibles");
          var url = api_urls.refresh + '?id_indicador='+ idIndicador;
          var data;
          var that = this;

          if (idIndicador == -1) {
            this.model.set({
              'idIndicadorSeleccionado': idIndicador,
              'desgloses': [],
              'etiquetas': [],
              'valoresIndicadoresDesgloses': [],
              'fechasDestacadas': [],
            });
            that.model.unset('fechaSeleccionada');
            swap();
            update();
            if (idMeta != -1 && indicadoresDisponibles == 0) {
              $(this.el).find('.selectIndicador').prop('disabled', true);
              showModalOnSteroids(globalModal, 'error', 'Ningún Indicador ha sido definido para la Meta seleccionada');
            }
          } else {
            waitingDialog.show('Aguarde un momento por favor...');
            $.ajax(url, {
                  'type': 'GET',
                  'processData': false,
                  'contentType': 'application/json',
                   success: function(data) {
                    var indicador = that.model.get('indicadores')[idxIndicador];
                    var desgloses = data['desgloses'];
                    var etiquetas = data['etiquetas'];
                    var valoresIndicadoresDesgloses = data['valoresIndicadoresDesgloses'];
                    var fechasDestacadas = data['fechasDestacadas'];
                    var fechaSeleccionadaAnterior = that.model.get('fechaSeleccionada');

                    /* FIX DESDE BACKEND */
                    if ($.isEmptyObject(valoresIndicadoresDesgloses)) {
                      desgloses = [];
                      etiquetas = [];
                    }

                    /* Actualizar variables del Modelo */
                   /* that.model.set({
                      'idIndicadorSeleccionado': idIndicador,
                      'desgloses': desgloses,
                      'etiquetas': etiquetas,
                      'valoresIndicadoresDesgloses': valoresIndicadoresDesgloses,
                      'fechasDestacadas': fechasDestacadas,
                    });*/

                    delete etiquetas['foo'];
                    delete desgloses['foo'];
                    that.model.set('idIndicadorSeleccionado', idxIndicador);
                    that.model.set('desgloses', desgloses);
                    that.model.set('etiquetas', etiquetas);
                    that.model.set('valoresIndicadoresDesgloses', valoresIndicadoresDesgloses);
                    that.model.set('fechasDestacadas', fechasDestacadas);
                    swap(indicador, etiquetas, valoresIndicadoresDesgloses);

                    if (fechasDestacadas.length > 0) {
                      fechaSeleccionada = fechasDestacadas[0];
                    } else {
                      fechaSeleccionada = Object.keys(valoresIndicadoresDesgloses)[0];
                    }
                    waitingDialog.hide();
                    if ($.isEmptyObject(valoresIndicadoresDesgloses)) {
                      that.model.unset('fechaSeleccionada');
                      showModalOnSteroids(globalModal, 'error', 'El Indicador seleccionado no posee aún datos disponibles');
                    } else {
                      that.model.unset('fechaSeleccionada', {silent: true});
                    }
                    that.model.set('fechaSeleccionada', fechaSeleccionada);
                   },
                   error: function(data) {
                    waitingDialog.hide();
                    showModalOnSteroids(globalModal, 'error', 'Ha ocurrido un error. Por favor, vuelva a cargar la página', true);
                  },
            });
          }   
        },
        anioSelected: function(event){
          if (event.target) {
            this.model.set("fechaSeleccionada", $(this.el).find('.selectFecha').val());
          }
          this.render();
          this.desgloseSelected();
        },
        desgloseSelected: function(event) {
          this.model.set("desgloseSeleccionado", $(this.el).find('.selectDesglose').val()); 
          this.etiquetaSelected();
        },
        etiquetaSelected: function(event) {
          this.model.set("etiquetaSeleccionada", $(this.el).find('.selectEtiqueta').val());

          var valoresIndicadoresDesgloses = this.model.get('valoresIndicadoresDesgloses');
          var fechaSeleccionada = this.model.get('fechaSeleccionada');
          var idEtiquetaSeleccionada = this.model.get('etiquetaSeleccionada');
          var etiquetasActuales = this.model.get('etiquetasActuales');
          if ($.isEmptyObject(valoresIndicadoresDesgloses)) {
            update();
          } else {
            var valoresRefGeografica = valoresIndicadoresDesgloses[fechaSeleccionada].valoresRefGeografica;
            update(valoresRefGeografica, idEtiquetaSeleccionada, etiquetasActuales);  
          }
        }
    })

    var FechasDestacadasView = Backbone.View.extend({
      el: '#fechasDestacadasDiv',
      template: _.template($('#fechasDestacadasLoader').html()),
      initialize: function() {
        this.model.on('change:fechaSeleccionada', this.render, this);
        this.render();
        },
        events: {'click .ButtonFechaDestacada': 'fechaDestacadaClicked'},
        render:function(){
          this.$el.html(this.template({model:this.model}));
          return this;
        },
        fechaDestacadaClicked: function(event){
          this.model.set("fechaSeleccionada", event.target.value);
        }
    })

    /* Incializar Mapa */
    mapMe(poligonoNacion, poligonoProvincias, poligonoDepartamentos);

    var globalModal = 'globalModal';
    var objetivos = {{ objetivos|json_encode|raw }};
    var metas = {{ metas|json_encode|raw }};
    var indicadores = {{ indicadores|json_encode|raw }};
    var idIndicadorSeleccionado = {{ idxIndicadorSeleccionado|json_encode }};
    var idxMetaSeleccionada = {{ idxMetaSeleccionada|json_encode }};

    if ( idIndicadorSeleccionado != -1 ) {
      var valoresIndicadoresDesgloses = {{ valoresIndicadoresDesgloses|json_encode|raw }};
      var desgloses = {{ desgloses|json_encode|raw }};
      var etiquetas = {{ etiquetas|json_encode|raw }};
      var idMetaSeleccionada = metas[idxMetaSeleccionada].id;
      var idObjetivoSeleccionado = metas[idxMetaSeleccionada].id_objetivo;
      var fechasDestacadas = indicadores[idIndicadorSeleccionado].fechasDestacadas;
      var fechaSeleccionada;
      
      delete etiquetas['foo'];
      delete desgloses['foo'];

      /* Primer 'período' a mostrar: El primero de los años destacados o si ninguno de 
    estos ha sido definido, el año más lejano a la actualidad de los valores recuperados */

      if (fechasDestacadas.length > 0) {
        fechaSeleccionada = fechasDestacadas[0];
      } else {
        fechaSeleccionada = Object.keys(valoresIndicadoresDesgloses)[0];
      }

      if ($.isEmptyObject(valoresIndicadoresDesgloses)) {
        showModalOnSteroids(globalModal, 'error', 'El Indicador seleccionado no posee aún datos disponibles', true);
      } else {
        var modelForm = new ChainSelectData({
        'objetivos': objetivos,
        'metas': metas,
        'indicadores': indicadores,
        'valoresIndicadoresDesgloses': valoresIndicadoresDesgloses,
        'desgloses': desgloses,
        'etiquetas': etiquetas,
        'fechasDestacadas': fechasDestacadas,
        'idObjetivoSeleccionado': idObjetivoSeleccionado,
        'idxMetaSeleccionada': idxMetaSeleccionada,
        'idMetaSeleccionada': idMetaSeleccionada,
        'idIndicadorSeleccionado': idIndicadorSeleccionado,
        'fechaSeleccionada': fechaSeleccionada
        });
      }
    } else {
      var modelForm = new ChainSelectData({
        'objetivos': objetivos,
        'metas': metas,
        'indicadores': indicadores
      });  
    }

    var viewForm = new ChainSelectView({model:modelForm});
    var viewFechasDestacadas = new FechasDestacadasView({model:modelForm});
  });
 
 function showDiv() {
    document.getElementById('checkboxExportarDiv').style.display = "block";
 }
  function hideDiv() {
    document.getElementById('checkboxExportarDiv').style.display = "none";
 }

 $('#formExportModal').submit(function() {
    // var idIndicador = $('#selectorIndicador').val()
    var idIndicador = $('#selectorIndicador').children(':selected').attr('id');
    var fechaSeleccionada = $('#selectorAnio').val()
    
    this.action = api_urls.export + '?id_indicador='+ idIndicador;
    $('#csvRadio', this).val(fechaSeleccionada);
  });

  $('#exportarModal').on('hidden.bs.modal', function () {
    $('#checkboxExportarDiv', this).hide();
    $('input:radio[name="exportar"][id="csvRadio"]', this).prop('checked', false);
  });
</script>
{% endblock %}