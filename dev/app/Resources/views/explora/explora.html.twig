{% extends 'base.html.twig' %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('leaflet/leaflet.js') }}"></script>
    <script src="{{ asset('bootstrap-select/dist/js/bootstrap-select.js') }}"></script>
<!--     <script src="http://maps.google.com/maps/api/js?v=3.2&sensor=false"></script>
    <script src="http://matchingnotes.com/javascripts/leaflet-google.js"></script> -->
{% endblock %}    

{% block stylesheets %}
    {{ parent() }}
    <style type="text/css">
    body {
        padding-top: 150px;
    }

    #map_canvas {
      height: 100%;
      overflow: hidden;
      width: 100%;
    }

    .info {
        /*padding: 6px 8px;*/
        /*font: 14px/16px Arial, Helvetica, sans-serif;*/
     /*   font: 12px/14px Roboto;
        background: white;
        background: rgba(255,255,255,0.8);
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
        border-radius: 5px;
        opacity: 0.7;*/
    background-color: rgba(255, 255, 255, 0.8);
    font-family: "Open Sans","Helvetica Neue","Helvetica",sans-serif;
    padding: 10px;
    position: absolute;
    right: 10px;
    top: 60px;
    width: 280px;
    z-index: 100;
    }
    .info h4 {
        margin: 0 0 5px;
        color: #777;
    }
    .info h3 {
        /*margin: 0 0 5px;*/
        color: #2b8cbe;
        opacity: 0.7;
    }
    .legend {
        line-height: 18px;
        color: #555;
    }
    .legend i {
        width: 18px;
        height: 18px;
        float: left;
        margin-right: 8px;
        opacity: 0.7;
    }
    .myClass {
        padding-top: 5%;
        padding-left: 5%;
        opacity: 0.7;
    }


    </style>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="{{ asset('leaflet/leaflet.css') }}" />
    <link rel="stylesheet" href="{{ asset('bootstrap-select/dist/css/bootstrap-select.css') }}" />
    <style type="text/css">
      .leaflet-left .leaflet-control-scale {
      display: inline-block;
      float: none;
    }
    </style>
    <!-- Estilo fuente -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700" rel="stylesheet" type="text/css">
    <!-- Custom styles for this template -->
    <link href="{{ asset('css/estilo_cncps.css') }}" rel="stylesheet">
    <link href="http://www.politicassociales.gob.ar/public/css/font-awesome.min.css" rel="stylesheet" >
    <!-- Estilo del Slider -->
    <link rel="stylesheet" type="text/css" href="http://www.politicassociales.gob.ar/public/css/styles.css" media="all"/>
    
{% endblock %}

{% block body %}

<header>
   <div class="container">
      <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-6">
          <div class="logoConsejo pull-left"><a href="http://www.politicassociales.gob.ar/Index"><img class="center-block" alt="Logo Consejo Nacional de Coordinaci&oacute;n de Pol&iacute;ticas Sociales" src="http://www.politicassociales.gob.ar/public/images/LogoConsejo.png"></a></div>
          <div class="logoPresidencia"><img alt="Logo Presidencia de la Nación" src="http://www.politicassociales.gob.ar/public/images/LogoPresidenciaWhite.png"></div>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-6">         
          <p class="mensajeAnoyFecha">            
              <strong>
              2016 - Año del Bicentenario de la Declaración de la Independencia Nacional</strong><br>
          </p>
        </div>  
      </div>
    </div>  
</header> 

<nav class="navbar navbar-default navbar-static-top">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="#">
      </a>
    </div>
  </div>
</nav>


<div class="container-fluid">
<form class="form-horizontal" role="form">
 <div class="form-group">
 <label for="selectorObjetivo" class="col-lg-1 control-label">Objetivo</label>
 <div class="col-lg-4">
    <select id="selectorObjetivo" >
    <option>Poner fin a la pobreza en todas sus formas en todo el mundo</option>
    </select>
 </div>
 <label for="selectorMeta" class="col-lg-1 control-label">Meta</label>
 <div class="col-lg-4">
   <select id="selectorMeta">
    <option>1.1 Para 2030, erradicar la pobreza extrema para todas las personas en el mundo</option>
    </select>  
 </div>
 </div>
 <div class="form-group">
 <label for="selectorIndicador" class="col-lg-1 control-label">Indicador</label>
   <div class="col-lg-4">
    <select id="selectorIndicador">
    <option>Porcentaje de población bajo la línea de pobreza</option>
    </select>
   </div>
   <label for="selectorDesgloce" class="col-lg-1 control-label">Desgloce</label>
   <div class="col-lg-4">
    <select id="selectorDesgloce">
        <option id='pobreza_h'>Masculino</option>
        <option id='pobreza_m'>Femenino</option>
    </select>
   </div>
 </div>
</form>

    <div class="row">
    <div class="col-md-1">
    </div>
     <div class="col-md-11">
        <div id="map_canvas" style="width: 1000px; height: 500px"></div>
        </div>
    </div>
    <form class="form-horizontal" role="form">
    <div class="form-group">
 <!-- <label for="selectorPeriodo" class="col-lg-1 control-label">Período</label> -->
 <div class="col-lg-5">
 </div>
 <div class="col-lg-2">
    <select id="selectorPeriodo">
    <option id='2015'>2015</option>
    <option id='2014'>2014</option>
    </select>
 </div>
 <div class="col-lg-5">
 </div>
  </div>
  </form>
</div>
<!-- <div id="map_canvas" class="leaflet-container leaflet-fade-anim"></div> -->


<script type="text/javascript">
$(document).ready(function() {
    // $('#sel').val('Relish');
    // $('#sel').selectpicker('render');
    // $('#sel').selectpicker('val', 'Ketchup');

  var idIndicador = $('#selectorDesgloce').children(":selected").attr("id");
  var descripcionIndicador = $('#selectorDesgloce').val();
  var periodo = $('#selectorPeriodo').children(":selected").attr("id");
  inicializarMapa(idIndicador, descripcionIndicador, periodo);
});

// $('#indicadores li').on('click', function() {
//   actualizarCapa($(this).attr('id'), $(this).text());
// });
$('#selectorDesgloce').on('change', function() {
  var idIndicador = $(this).children(":selected").attr("id");
  var descripcionIndicador = $(this).val();
  var periodo = $('#selectorPeriodo').children(":selected").attr("id");
  actualizarCapa(idIndicador, descripcionIndicador, periodo);
});

$('#selectorPeriodo').on('change', function() {
  var idIndicador = $('#selectorDesgloce').children(":selected").attr("id");
  var descripcionIndicador = $('#selectorDesgloce').val();
  var periodo = $(this).children(":selected").attr("id");
  actualizarCapa(idIndicador, descripcionIndicador, periodo);
});
</script>

<script>
  var map;
  var capaActiva;
  var ambitoActivo = "";
  var baseMaps = {};
  var baseTile = L.tileLayer('http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png');
  var info;
  var legend;

  var selected = '';
  var text = '';
  var period = '';
  var valoresIndicadores;
  var ambito;

function inicializarMapa(s, t, p) {
    selected = s;
    text = t;
    period = p;
    $.getJSON("geoData.js", function (geoJsonData) {
      crearCapas(geoJsonData);
      $.getJSON("data.js", function ( data ) {
        valoresIndicadores = data;
        inicializarValoresIndicadores();
      });
    });
}

function style(feature) {
    return {
        fillColor: getColor(feature.properties.value),
        // fillColor: getColor(valoresIndicadores['provincia'][refGeoId]['2015'][selected]),
        weight: 2,
        opacity: 1,
        color: 'white',
        dashArray: '3',
        fillOpacity: 0.7
        };
}

function getColor(d) {
    return d > 80 ? '#045a8d' :
           d > 60 ? '#2b8cbe' :
           d > 40 ? '#74a9cf' :
           d > 20 ? '#bdc9e1' :
                    '#f1eef6' ;
}

function getLegend() {
  var grades = [0, 20, 40, 60, 80];
  var table = '<table class="table"><tbody>';
  var trColors = '<tr>';
  var trLabels = '<tr>';

  // loop through our density intervals and generate a label with a colored square for each interval
  for (var i = 0; i < grades.length; i++) {
      trColors += '<td style="background-color: ' + getColor(grades[i] + 1) + ';"></td>';
      trLabels += '<td>' + grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] : '+') + '</td>';
  }

  trColors += "</tr>";
  trLabels += "</tr>";
  table += trColors + trLabels + "</tbody></table>";

  return table;
}

function addDivLegend (map) {
    var div = L.DomUtil.create('div', 'info legend');
    var grades = [0, 20, 40, 60, 80];
    div.innerHTML = '<b>' + text + ' </b><hr>'
    var table = '<table class="table"><tbody>';
    var trColors = '<tr>';
    var trLabels = '<tr>';

    // loop through our density intervals and generate a label with a colored square for each interval
    for (var i = 0; i < grades.length; i++) {
        trColors += '<td style="background-color: ' + getColor(grades[i] + 1) + ';"></td>';
            // '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
            // grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
        trLabels += '<td>' + grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] : '+') + '</td>';
    }

    trColors += "</tr>";
    trLabels += "</tr>";
    table += trColors + trLabels + "</tbody></table>";
    div.innerHTML += table;

    return div;
}

function addDivInfo (map) {
        this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
        this.update();
        return this._div;
    }

// method that we will use to update the control based on feature properties passed
function updateDivInfo (props) {
    if (props) {
      var text = $('#selectorIndicador').children(":selected").val();
      var open = '<table style="width:250px;table-layout:fixed;" class="table"><tbody><tr>';
      var content = '<td style="word-wrap:break-word;">' + "<h3>" + props.valor + "</h3>" + '</td><td class="col-xs-8">' + text + ' (' + period + ')' + '</td>';
      var close = '</tr></tbody></table>';
      
      // var divHead = '<p><b>' + props.refGeo +'</b></p>';
      var divHead = '<h4>' + props.refGeo +'</h4>';
      var divContent = open + content + close;
      var divLegend = getLegend();

      this._div.innerHTML = divHead + divContent + divLegend;
    }
}

function inicializarValoresIndicadores () {

  // if (baseMaps['Provincia']) {
  //   ambitoActivo = 'Provincia';
  // } else if (baseMaps['Nación']) {
  //   ambitoActivo = 'Nación';
  // }

  $.each(baseMaps, function(ambito, capa) {
    /* Si es capa actual, pinto */
    /* id numérico y no string */
      capa.eachLayer(function (layer) {
        refGeoId = layer.feature.properties.id;
        valor = valoresIndicadores[ambito][refGeoId][period][selected];
        layer.feature.properties.valor = valor;
        if (ambito == ambitoActivo) {
          layer.setStyle({fillColor: getColor(valor)});
        }
      });
  });
}

function actualizarCapa(s, t, p) {
    map.removeControl(info);
    selected = s;
    text = t;
    period = p;

    info.onAdd = addDivInfo;
    info.update = updateDivInfo;
    info.addTo(map);

    capaActiva.eachLayer(function (layer) {
        refGeoId = layer.feature.properties.id;
        valor = valoresIndicadores[ambitoActivo][refGeoId][period][selected];
        layer.feature.properties.valor = valor;
        layer.setStyle({fillColor: getColor(valor)})
    });
}

function onOverlayAdd(selectedBaseLayer){
  ambitoActivo = selectedBaseLayer.name;
  capaActiva = selectedBaseLayer.layer;
  // capaActiva.eachLayer(function (layer) {
  //   /* Sólo pintar */
  //     // layer.setStyle(style(layer.feature))
  //     // console.log(layer.feature.properties.valor);
  //     layer.setStyle({fillColor: getColor(layer.feature.properties.valor)})
  //   });
  actualizarCapa(selected, text, period);
}

function crearCapas(geoJsonData) {

    /* Crear Capas */
    
    // var baseMaps = {};
    var capas = [];

    if (geoJsonData["Provincia"]) {
      baseMaps["Provincia"] = L.geoJson(geoJsonData["Provincia"], {onEachFeature: onEachFeature, style: style});
      ambitoActivo = "Provincia";
      capaActiva = baseMaps["Provincia"];
    }

    if (geoJsonData['Nación']) {
      baseMaps["Nación"] = L.geoJson(geoJsonData['Nación'], {onEachFeature: onEachFeature, style: style});
      if (ambitoActivo == "") {
        ambitoActivo = "Nación";
        baseMaps["Nación"];
      }
    }

    // $.each(baseMaps, function(key, value) {
    //   // if (ambito == "") {
    //   //   ambito = key;
    //   // }
    //   capas.push(value);
    // });

    // capaActiva = capas[0];

    /* Crear 'Objeto Mapa', asignar a Div y definir capa base */
    map = L.map(document.getElementById('map_canvas'), {
      layers: [capaActiva],
      doubleClickZoom: false});
    /* Agregar Mapa de Base */
    baseTile.addTo(map);
    /* Controles sobre el Mapa */
    info = L.control({position: 'topright'});
    L.control.layers(baseMaps, null, {position: 'topleft', collapsed: true}).addTo(map);
    
    // L.control.scale().addTo(map);

    /* Definir métodos de Creación y Actualización */
    info.onAdd = addDivInfo;
    info.update = updateDivInfo;

    // Definir centro de mapa a partir de capa por defecto
    map.fitBounds(capaActiva.getBounds());
    /* Agregar capas y otros */
    info.addTo(map);

    /*Definiciones sobre 'map.on' */
    map.on('baselayerchange', onOverlayAdd);

    function highlightFeature(e) {
        var layer = e.target;
        layer.setStyle({
            weight: 1,
            color: '#646',
            dashArray: '',
            fillOpacity: 0.3
        });
      
        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }
        info.update(layer.feature.properties);
    }

    function resetHighlight(e) {
        capaActiva.resetStyle(e.target);
        e.target.setStyle({fillColor: getColor(e.target.feature.properties.valor)});
        info.update();
    }

    function zoomToFeature(e) {
        map.fitBounds(e.target.getBounds());
    }

    function zoomOut(e) {
      map.fitBounds(capaActiva.getBounds());
    }

    function onEachFeature(feature, layer) {
        // layer.bindPopup(feature.properties.nombre + " " + feature.properties[selected]);
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: zoomToFeature,
            dblclick: zoomOut
        });
    }
}


</script>

<!-- http://gis.stackexchange.com/questions/41928/adding-removing-leaflet-geojson-layers -->
<!-- http://gis.stackexchange.com/questions/68941/how-to-add-remove-legend-with-leaflet-layers-control -->
{% endblock %}