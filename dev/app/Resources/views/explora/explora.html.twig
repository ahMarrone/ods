{% extends 'base.html.twig' %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('leaflet/leaflet.js') }}"></script>
    <!-- Load d3.js and c3.js -->
    <script type="text/javascript" src="{{ asset('d3/d3.js') }}" charset="utf-8"></script>
    <script type="text/javascript" src="{{ asset('c3/c3.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/underscore-min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/backbone-min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/map.js') }}"></script>
    <!-- <script type="text/javascript" src="{{ asset('geoData.js') }}"></script> -->
    <script type="text/javascript" src="{{ asset('js/nacion-simplified-1dot0-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/provincias-simplified-0dot5-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/departamentos-simplified-1dot0-mapa.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/sideChart.js') }}"></script>

{% endblock %}    

{% block stylesheets %}
    {{ parent() }}
    <style type="text/css">
    /*body {
        padding-top: 150px;
    }*/

    #map_canvas {
      height: 100%;
      overflow: hidden;
      width: 100%;
    }
    .legend {
        line-height: 18px;
        color: #555;
    }
    .legend i {
        width: 18px;
        height: 18px;
        float: left;
        margin-right: 8px;
        opacity: 0.7;
    }
    .myClass {
        padding-top: 5%;
        padding-left: 5%;
        opacity: 0.7;
    }


    </style>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="{{ asset('leaflet/leaflet.css') }}" />
    <link rel="stylesheet" href="{{ asset('css/miscStyle.css') }}" />
    <link rel="stylesheet" href="{{ asset('c3/c3.css') }}" />
    <style type="text/css">
      .leaflet-left .leaflet-control-scale {
      display: inline-block;
      float: none;
    }
    </style>

    
{% endblock %}

{% block body %}

<div class="container-fluid" id='divFluid'>
<script id="formLoader" type="text/template">
<!-- Modificar para que sea  "1.1.1 Proporción de la p...nacional de la pobreza." -->

<!--  TamanioTotal = TamanioDeseado - 3  -->
<!-- 1. Encontrar la posición que corresponde a la mitad del arreglo -->
<!-- 2. Insertar '...' -->
<!-- 3. Copiar desde 0 hasta floor(TamanioDeseado / 2) e insertar '...'  -->
<!-- 4. Copiar desde el final hasta floor(TamanioDeseado / 2) -->

<%_.mixin({
  trim: function(string, max) {
    var idx = string.indexOf(' ', 0);
    while ((idx < max) && (idx != -1)) {
      idx = string.indexOf(' ', idx + 1);
    }
    return (idx == -1) ? string : string.substring(0, idx) + '...';
  }
});%>
  <form class="form-horizontal" role="form">
    <div class="form-group">
    <label for="selectorObjetivo" class="col-xs-2 control-label">Objetivo</label>
    <div class="col-xs-4">
    <select id="selectorObjetivo" class="form-control selectObjetivo">
      <% _.each(model.get("objetivos"), function( objetivo, i){ %>
        <option title="<%= objetivo.descripcion %>" value="<%= objetivo.id %>" <% if (objetivo.id == model.get("objetivo_selected")) { %> selected<% }  %>><%= _(objetivo.descripcion).trim(60) %></option>
      <% }); %>
    </select>
    </div>
    <label for="selectorMeta" class="col-xs-1 control-label">Meta</label>
      <div class="col-xs-4">
      <select id="selectorMeta" class="form-control selectMeta">
      <% _.each(model.get("metas"), function( meta, i){ %>',
        <% if ( meta.id_objetivo == model.get("objetivo_selected") ){ %>
          <option title="<%= meta.descripcion %>" value="<%= meta.id %>" <% if (meta.id == model.get("meta_selected")) { %> selected<% }  %>><%= _(meta.descripcion).trim(60) %></option>
        <% } %>
      <% }); %>
      </select>
    </div>
    </div>
    <div class="form-group">
      <label for="selectorIndicador" class="col-xs-2 control-label">Indicador <a target="_blank" href="#" class="glyphicon glyphicon-question-sign" title="Documento Técnico"></a></label>
      <div class="col-xs-4">
        <select id="selectorIndicador" class="form-control selectIndicador">
          <% _.each(model.get("indicadores"), function( indicador, i){ %>
            <% if ( indicador.id_meta == model.get("meta_selected") ){ %>
              <option value="<%= i %>" <% if (i == model.get("indicador_selected_id")) { %> selected<% }  %>><%= indicador.descripcion %></option>
            <% } %>
          <% }); %>
        </select>
      </div>
      <label for="selectorAnio" class="col-xs-1 control-label">Año</label>
      <div class="col-xs-4">
      <select id="selectorAnio" class="form-control selectFecha">
      <% _.each(model.get("valoresIndicadoresDesgloses"), function(e, f){ %>',
          <option title="<%= f %>" value="<%= f %>" <% if (f == model.get("fecha_selected")) { %> selected<% }  %>><%= f %></option>
      <% }); %>
      </select>
    </div>
    </div>
    <div class="form-group">
    <label for="selectorDesglose" class="col-xs-2 control-label">Desglose</label>
    <div class="col-xs-4">
    <select id="selectorDesglose" class="form-control selectDesglose">
      <% _.each(model.get("desgloses"), function(desglose, i){ %>
      <!-- MODIFICAR PARA USAR BÚSQUEDA BINARIA  -->
        <% if ( _.indexOf(model.get("valoresIndicadoresDesgloses")[model.get("fecha_selected")].id_desgloses, desglose.id) != -1 ){ %>
        <option title="<%= desglose.descripcion %>" value="<%= desglose.id %>"<% if (desglose.id == model.get("desglose_selected")) { %> selected<% } %>><%= desglose.descripcion %></option>
        <% } %>
      <% }); %>
    </select>
    </div>
    <label for="selectorEtiqueta" class="col-xs-1 control-label">Etiqueta</label>
      <div class="col-xs-4">
      <% if ( model.get("desglose_selected") == 0 ) { %>
      <select disabled id="selectorEtiqueta" class="form-control selectEtiqueta">
      <% } else { %>
      <select id="selectorEtiqueta" class="form-control selectEtiqueta">
      <% } %>
      <% model.set('etiquetas_current', []) %>
      <% _.each(model.get("etiquetas"), function(etiqueta, i){ %>
        <% if ( etiqueta.id_desglose == model.get("desglose_selected") ){ %>
          <% model.get('etiquetas_current').push(etiqueta.id); %>
          <option title="<%= etiqueta.descripcion %>" value="<%= etiqueta.id %>" <% if ( etiqueta.descripcion == "Total" ) { model.set('etiqueta_selected', etiqueta.id ) %> selected<% } %>><% if ( etiqueta.id != 0 ) { %> <%= etiqueta.descripcion %> <% } %></option>
        <% } %>
      <% }); %>
      </select>
    </div>
    </div>
  </form>  
</script>
</div>

<div class="container-fluid">
  <div id="mapCanvas" style="width: 1100px; height: 500px"></div>
</div>

<div class="container-fluid" id='fechasDestacadasDiv'>
<script id="fechasDestacadasLoader" type="text/template">
<form class="form-horizontal" role="form">
  <div class="form-group" id=>
    <div class="btn-group " role="group" aria-label="...">
    <% _.each(model.get("indicadores")[model.get("indicador_selected_id")].fechasDestacadas, function(fecha, i) { %>
    <input type="button" value="<%= fecha %>" class="ButtonFechaDestacada btn btn-default <% if (fecha == model.get('fecha_selected')) { print ('active'); } %>">
    <% }); %>
  </div>  
  <div class="col-lg-5">
  </div>
  </div>
</form>
</script>
</div>

<script type="text/javascript">
  $(document).ready(function() {

    var ChainSelectData = Backbone.Model.extend({
      defaults: {
        'objetivos':[],
        'metas':[],
        'indicadores':[],
        'valoresIndicadoresDesgloses': [],
        'desgloses': [],
        'etiquetas': [],
        'etiquetas_current': [],
        'objetivo_selected': '',
        'meta_selected': '',
        'indicador_selected_id': '',
        'fecha_selected': ''
      }
    });

    var ChainSelectView = Backbone.View.extend({
      el: '#divFluid', /* Donde quiero renderizar */
      template: _.template($('#formLoader').html()), /* Lo que quiero renderizar */

      initialize: function() {
        /* Primer elemento de la lista de desgloses para una fecha definida */
        this.model.set('desglose_selected', this.model.get('valoresIndicadoresDesgloses')[this.model.get('fecha_selected')].id_desgloses[0]);

        this.model.on('change:objetivo_selected', this.render, this);
        this.model.on('change:meta_selected', this.render, this);
        this.model.on('change:indicador_selected_id', this.render, this);
        this.model.on('change:fecha_selected', this.anioSelected, this);
        this.model.on('change:desglose_selected', this.render, this);
        this.render();

        /* Inicializar mapa */
        swap(this.model.get('indicadores')[this.model.get('indicador_selected_id')], this.model.get('etiquetas'), this.model.get('valoresIndicadoresDesgloses'));
        valoresRefGeografica = this.model.get('valoresIndicadoresDesgloses')[this.model.get('fecha_selected')].valoresRefGeografica
        idEtiquetaSeleccionada = this.model.get('etiqueta_selected');
        descripcionEtiquetaSeleccionada = this.model.get('etiquetas')[this.model.get('etiqueta_selected')].descripcion;
        etiquetasActuales = this.model.get('etiquetas_current');
        update(valoresRefGeografica, idEtiquetaSeleccionada, descripcionEtiquetaSeleccionada, etiquetasActuales);

        },
        events: {
                  'change .selectObjetivo': 'objetivoSelected',
                  'change .selectMeta': 'metaSelected',
                  'change .selectIndicador': 'indicadorSelected',
                  'change .selectFecha': 'anioSelected',
                  'change .selectDesglose': 'desgloseSelected',
                  'change .selectEtiqueta': 'etiquetaSelected',
        },
        render:function(){
        // var tpl = _.template(template_select);
        //   this.$el.html(tpl({model:this.model}));
          // this.$el.html(this.template({model:this.model}));
          this.$el.html(this.template({model:this.model}));
          return this;
        },
        objetivoSelected: function(event){
          this.model.set("objetivo_selected",event.target.value); 
          this.metaSelected();
        },
        metaSelected: function(e){
          this.model.set("meta_selected",$(this.el).find('.selectMeta').val());
            if (this.model.get('indicadores').length){
                this.indicadorSelected();
            }
        },
        indicadorSelected: function(e){
          this.model.set("indicador_selected_id",$(this.el).find('.selectIndicador').val());
          /* Ver si es necesario un 'if */
          /* PROBAR */
          swap(this.model.get('indicadores')[this.model.get('indicador_selected_id')], this.model.get('etiquetas'));
          this.desgloseSelected();
        },
        fechaClicked: function(event) {
          this.model.set("fecha_selected", $(this.el).find('.selectFecha').val()); 
          // console.log("desde select" + this.model.get("fecha_selected"));
          this.render();
        },
        anioSelected: function(event){
          /* MEJORAR */
          if (!(event.target)) {
            this.render();
          } else {
            this.model.set("fecha_selected", event.target.value);
          }
          this.desgloseSelected();
        },
        desgloseSelected: function(event){
          this.model.set("desglose_selected", $(this.el).find('.selectDesglose').val()); 
          this.etiquetaSelected();
        },
        etiquetaSelected: function(event){
          this.model.set("etiqueta_selected", $(this.el).find('.selectEtiqueta').val());
          valoresRefGeografica = this.model.get('valoresIndicadoresDesgloses')[this.model.get('fecha_selected')].valoresRefGeografica;
          idEtiquetaSeleccionada = this.model.get('etiqueta_selected');
          descripcionEtiquetaSeleccionada = this.model.get('etiquetas')[this.model.get('etiqueta_selected')].descripcion;
          etiquetasActuales = this.model.get('etiquetas_current');
          update(valoresRefGeografica, idEtiquetaSeleccionada, descripcionEtiquetaSeleccionada, etiquetasActuales);
        }
    })


    var FechasDestacadasView = Backbone.View.extend({
      el: '#fechasDestacadasDiv',
      template: _.template($('#fechasDestacadasLoader').html()),
      initialize: function() {
        // console.log(this.model.get('fecha_selected'));
        // console.log("inicialice");
        this.model.on('change:fecha_selected', this.render, this);
        this.render();
        },
        events: {
                  'click .ButtonFechaDestacada': 'fechaDestacadaClicked',
        },
        render:function(){
          this.$el.html(this.template({model:this.model}));
          return this;
        },
        fechaDestacadaClicked: function(event){
          // console.log(this.model.get('fecha_selected'));
          this.model.set("fecha_selected", event.target.value);
          // console.log("modifique: " + this.model.get('fecha_selected'));
        }
    })

    /* Incializar Mapa */
    mapMe(poligonoNacion, poligonoProvincias, poligonoDepartamentos);

    var valoresIndicadoresDesgloses = {{ valoresIndicadoresDesgloses|json_encode|raw }};
    var indicadores = {{ indicadores|json_encode|raw}};
    var idIndicadorSeleccionado = {{ idIndicadorSeleccionado }};
    var fechaSeleccionada = indicadores[idIndicadorSeleccionado].fechasDestacadas[0];

    /* CORREGIR CUANDO 'AÑOS DESTACADOS' ESTÁ VACÍO */

    /* Primer anio a mostrar. El primero de los años destacados o si ninguno de 
    estos ha sido definido, el año más lejano a la actualidad */

    // fechaSeleccionada = Object.keys(valoresIndicadoresDesgloses)[0];
    // console.log({{ indicadores|json_encode|raw}}[{{ idIndicadorSeleccionado }}].fechasDestacadas[0]);
    // console.log(valoresIndicadoresDesgloses);
    
    // console.log(valoresIndicadoresDesgloses);
    // console.log({{ etiquetas|json_encode|raw}});
    // console.log({{ indicadores|json_encode|raw}});
    // console.log({{ desgloses|json_encode|raw}});

    var modelForm = new ChainSelectData({
      'objetivos': {{ objetivos|json_encode|raw}},
      'metas': {{ metas|json_encode|raw}},
      'indicadores': {{ indicadores|json_encode|raw}},
      'valoresIndicadoresDesgloses': valoresIndicadoresDesgloses,
      'desgloses': {{ desgloses|json_encode|raw}},
      'etiquetas': {{ etiquetas|json_encode|raw}},
      'objetivo_selected': {{ idObjetivoSeleccionado }},
      'meta_selected': {{ idMetaSeleccionada }},
      'indicador_selected_id': idIndicadorSeleccionado,
      'fecha_selected': fechaSeleccionada
    });

    // var view = new ThreeSelectView({el: $("#selects"), model:model});
    var viewForm = new ChainSelectView({model:modelForm});
    var viewFechasDestacadas = new FechasDestacadasView({model:modelForm});

    
  });
</script>


<!-- http://gis.stackexchange.com/questions/41928/adding-removing-leaflet-geojson-layers -->
<!-- http://gis.stackexchange.com/questions/68941/how-to-add-remove-legend-with-leaflet-layers-control -->
{% endblock %}