{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}

    <link href="{{ asset('css/valoresindicadores.css') }}" rel="stylesheet" />
    <link href="{{ asset('css/bootstrap-select.min.css') }}" rel="stylesheet" />
{% endblock %}

{% block javascripts %}
    {{ parent() }}

  
    <script src="{{ asset('js/underscore-min.js') }}"></script>
    <script src="{{ asset('js/backbone-min.js') }}"></script>
    <script src="{{ asset('js/bootstrap-select.min.js') }}"></script>
    <script src="{{ asset('js/globalutils.js') }}"></script>
{% endblock %}

{% block body %}

  <div class="container">
      <div class="row">

        <ol class="breadcrumb">
          <li><a href="{{ path('paneluser_index') }}">Panel de usuario</a></li>
          <li><a href="{{ path('admin_crud_valoresindicadores_preload') }}">Precarga de valores indicadores</a></li>
          <li class="active">Carga de valores indicadores</a></li>
        </ol>

        <div class="page-header">
          <h2>Carga valores indicadores</h2>
          <h2><small>{{indicador.fkidmeta.fkidobjetivo.codigo}}.{{indicador.fkidmeta.codigo}}.{{indicador.codigo}} - {{indicador.descripcion}}</small></h2>
        </div>
      <div class="alert alert-info" class="col-md-3" role="alert"><b>Período:</b> {{fecha}}.
        <span>
          <b>Desglozando por:</b>
        {{ desgloces|join(', ') }}.
        </span>
        <span>
          <b>Cruzar etiquetas:</b> {{ cruzado ? "Si" : "No"}}.
        </span>
        <span>
          <b>Ámbito indicador:</b> {{indicador_ambito}}.
        </span>
        <span>
          <b>Tipo de indicador:</b> {{value_type}}
        </span>
      </div>
    </div>
      <div id="panelList">
        <div class=".panel"></div>
      </div>

    <div id="globalModal" class="modal fade bs-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-body">
        </div>
        </div>
      </div>
    </div>

</div>


<script id="panelListWrapper" type="text/template">
<nav class="navbar row second-navbar-panel">
  <div class="container-fluid">
    <div class="">
      <ul class="nav navbar-nav">
         <% if (this.collection.isRefLeft()) { %>
        <button id="newDataLoader" type="button" class="btn btn-default navbar-btn"><i class="fa fa-plus"></i>  Agregar ficha</button>
        <% }  %>
        <button id="saveNewDataLoaders" type="button" class="btn btn-success navbar-btn <% if (!this.collection.hasNewDataLoaders()) { %> disabled<% }  %>"><span class="glyphicon glyphicon-save"  ></span>  Guardar nuevos</button>
      </ul>
            <% if (this.collection.ambito_indicador == 'D') { %>
          <form class="navbar-form navbar-right" role="search">
          <div class="form-group">
              <select id="filterCardsSelect">
                <%= this.collection.getFilterOptions() %>
              </select>
          </div>
        </form>
        <p class="navbar-text pull-right">Filtrar por provincia: </p>
          <% }  %>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
<div class="row">

</div>
<div id="dataLoadersWrapper" class="row">
</div>
</script>


<script id="panelLoader" type="text/template">

    <div class="panel panel-primary col-md-3 col-sm-4 panelDataLoader pull-left">
    <% if (collection.filterParentID == model.ref_geografica_parent_id ) { %>
        <div class="panel-heading clearfix">
          <h4 class="panel-title pull-left" style="padding-top: 7.5px;">Carga de datos</h4>
        <div class="btn-group pull-right">
          <% if (model.data_has_changed) { %>
            <a class="saveDataLoader btn btn-sm btn-success btn-sm"><i class="fa fa-download"></i></a>
          <% }  %>
          <a class="deleteObject btn btn-sm btn-danger btn-sm"><i class="fa fa-trash"></i></a>
        </div>
        </div>
        <div class="panel-body">
          <form>
          <div class="form-group">
          <label>Referencia geográfica</label>
          <div>
            <select class="form-control refGeogSelect" <% if (model.is_preloaded) { %>disabled="disabled"<% }  %>>
            <%= this.getRefGeograficasSelect() %>
            </select>
            </div>
          </div>
          <% _.each( etiquetas, function( etiquetas_id, i){ %>
            <% id_formatted = parent.formatEtiquetaID(etiquetas_id) %>
          <div class="form-group">
            <label><%= parent.contructLabelEtiqueta(etiquetas_id) %></label>
            <div>
              <input type="number" step="{{step}}" max="{{range_max}}" min="{{range_min}}" class="form-control etiquetaInput" data-etiqueta-id="<%= id_formatted %>" value="<%= model.valor_etiquetas[id_formatted] %>">
            </div>
          </div>
           <% }); %>
              <a href="#" data-toggle="tooltip" title="<%= this.getTooltipInfo() %>">+Info</a>          
        </div>
        </form>
        </div> <!-- CIERRO PANEL BODY -->
    </div>
  <%
    collection.refGeograficas[model.id_ref_geografica].used = true;
  %>
  <% } %>
</script>



<script type="text/javascript">

    $(document).ready(function() {


      var globalModal = 'globalModal';

      function cartesianProductOf() {
          return _.reduce(arguments, function(a, b) {
              return _.flatten(_.map(a, function(x) {
                  return _.map(b, function(y) {
                      return x.concat([y]);
                  });
              }), true);
          }, [ [] ]);
      };


      // Recibe:
      //   [
      //       [ {"id":1, "desc":"Femenino"},
      //         {"id":2, "desc":"Masculino"}
      //         ],
      //       [
      //         {"id":3, "desc":"Amarillo"},
      //         {"id":4, "desc":"Morocho"},
      //         {"id":5, "desc":"Aria"},
      //         {"id":6, "desc":"Mestizo"},
      //       ]
      //   ] 
      //    y retorna un array con 2 valores (una lista de listas y un diccionario)
      //   [  
      //       [
      //         [1,2],
      //         [3,4,5,6]
      //       ],
      //       {
      //          1:"Femenino",
      //          2:"Masculino"
      //          3:"Amarillo"
      //            ...
      //        }
      //    ]
      function getEtiquetasData(etiquetasDesgloces){
        var etiquetasGroup = [];
        var etiquetasMetadata = {};
        $.each(etiquetasDesgloces, function( i, etiquetas_list ) {
            var tmpList = [];
            $.each(etiquetas_list, function( j, etiqueta_data ) {
                tmpList.push(etiqueta_data.id_etiqueta);
                etiquetasMetadata[etiqueta_data.id_etiqueta] = etiqueta_data.desc;
            });
            etiquetasGroup.push(tmpList);
        });
        return [etiquetasGroup,etiquetasMetadata];
      }


      function getExhaustiveList(etiquetas){
        var list = [];
        for (e in etiquetas){
          for (i in etiquetas[e]){
            list.push([etiquetas[e][i]]);
          }
        }
        return list;
      }


      function getEtiquetasList(etiquetasData, cruzado){
        if (cruzado){
          return cartesianProductOf.apply(this, etiquetasData);
        } else {
          return getExhaustiveList(etiquetasData);          
        }
      }

        var indicador_id = {{ indicador_id|json_encode|raw}};
        var indicador_ambito = {{indicador_ambito|json_encode|raw}}
    	  var desgloces = {{ desgloces|json_encode|raw}};
        var etiquetasDesgloces = {{ etiquetas_desgloces|json_encode|raw}};
        var etiquetasData = getEtiquetasData(etiquetasDesgloces);
        var cruzado = {{cruzado|json_encode|raw}};
        var etiquetas = getEtiquetasList(etiquetasData[0], cruzado);
        var etiquetasMetadata = etiquetasData[1];
        var fecha = {{ fecha|json_encode|raw}};
        var valoresEtiquetas = {{ valores_indicadores|json_encode|raw}};
        var api_urls = {{ api_urls|json_encode|raw}};
         // lista de todas las referencias geograficas disponibles
        var refGeograficasList =  {{ ref_geograficas|json_encode|raw}};
        var refGeograficasFilters = {{filter_ref_geograficas|json_encode|raw}};
        valoresEtiquetas = _.groupBy(valoresEtiquetas, 'id_ref_geografica');

        var value_type = {{ value_type|json_encode|raw}};
        var range_min = {{range_min}};
        var range_max = {{range_max}};

        var refGeograficaCollection = null;
        var refGeograficaPanelList = null;


        /////////////////// MODELOS //////////////////////////////7

        // Contiene los datos asociados a una referencia geografica
        // El objeto tendra un id de referencia geografica, y luego, una lista
        // de tuplas (id_etiqueta, valor), con los valores de las etiquetas correspondientes (nulo si no existe)
        var RefGeograficaData = Backbone.Model.extend({
        	defaults: {
        		'id_ref_geografica': null,
            'ref_geografica_parent_id':null,
        		'valor_etiquetas':{},
            'is_preloaded':false,
            'data_has_changed': false,
			     },
		    });

        // Coleccion de RefGeograficaData
		var RefGeograficaCollection = Backbone.Collection.extend({
  			model: RefGeograficaData,
        initialize: function(models, options) {
          options || (options = {});
          if (options.refGeograficas) {
              this.refGeograficas = options.refGeograficas;
              this.refGeograficasFilters = options.refGeograficasFilters;
              this.fecha = options.fecha;
              this.id_indicador = options.id_indicador;
              this.ambito_indicador = options.ambito_indicador;
              this.api_urls = options.api_urls;
              this.filterParentID = options.filterParentID;
          };
        },
        hasNewDataLoaders: function(){
          return this.filter({is_preloaded:false}).length;
        },
        isRefLeft: function(){
          if (this.countRefsUsed() == Object.keys(this.refGeograficas).length){
            return false;
          }
          return true;
        },
        countRefsUsed: function(){
          var count = 0;
          $.each(this.refGeograficas, function(i){
              if (this.used){
                count += 1;
              }
          });
          return count;
        },
        getFilterOptions: function(){
            var options = "";
            for (var r in this.refGeograficasFilters){
                var selected = (this.refGeograficasFilters[r].id == this.filterParentID) ? "selected" : "";
                options += "<option value='"+this.refGeograficasFilters[r].id+"' "+selected+">"+this.refGeograficasFilters[r].name+"</option>";
            }
            return options;
        }
		});

		///////////////////// VISTAS //////////////////////////////////7


    var RefGeograficaPanelList = Backbone.View.extend({
            el: '#panelList',
            template: _.template($('#panelListWrapper').html()),
            events: {
              'click #newDataLoader': 'addNewDataLoader',
              'click #saveNewDataLoaders': 'saveNewDataLoaders',
            },
            initialize: function(options){
                this.etiquetas = options.etiquetas;
                this.etiquetas_metadata = options.etiquetas_metadata;
                this.refGeograficas = options.refGeograficasList;
                this.sortedRefGeograficas = this.sortRefGeograficas();
                this.refGeograficasFilters = options.refGeograficasFilters;
                this.value_type = options.value_type;
                this.range_min = options.range_min;
                this.range_max = options.range_max;
                _.bindAll(this, "renderPanel");
                this.render();
            },
            renderPanel: function(model){
                if (model.get('ref_geografica_parent_id') == this.collection.filterParentID){
                  var panelView = new RefGeograficaPanel({model: model, etiquetas: this.etiquetas,refGeograficas: this.refGeograficas, sortedRefGeograficas: this.sortedRefGeograficas, parent:this});
                  panelView.render();
                  $('#dataLoadersWrapper').prepend(panelView.el);
              }
            },
            render: function(){
                var that = this;
                this.updateRefsUsed();
                this.$el.html( this.template({collection: this.collection}));
                this.collection.each(this.renderPanel);
                $('[data-toggle="tooltip"]').tooltip({html: true}); 
                $('#filterCardsSelect').selectpicker({
                  noneSelectedText: 'Filtrar por provincia'
                });
                var firstInputEtiqueta = $('.etiquetaInput')[0];
                if (firstInputEtiqueta){
                  $(firstInputEtiqueta).focus();
                }
                  //$('.etiquetaInput')[0].focus();
              $('#filterCardsSelect').on('change', function() {
              //that.applyFilter(this.value);
                  if (this.value != -1){
                    refGeograficaCollection.filterParentID = this.value;
                    refGeograficaPanelList.render();
                    //that.collection.each(that.renderPanel);
                  }
              })                      
            },
            sortRefGeograficas: function(){
                var refGeograficas = this.refGeograficas;
                var sortedRefGeograficas = Object.keys(refGeograficas).map(function(key) {
                    return [key, refGeograficas[key]];
                });
                sortedRefGeograficas.sort(function(a, b) {
                  if(a[1]["desc"] < b[1]["desc"]) return -1;
                  if(a[1]["desc"] > b[1]["desc"]) return 1;
                  return 0;
                });
                return sortedRefGeograficas;
            },
            getNextUnusedRef: function(){
              var refID = null;
              var that = this;
                $.each(this.sortedRefGeograficas, function(index, value) {
                  if (refID == null && !value[1].used && (value[1].parent == that.collection.filterParentID)){
                    refID = value[0];
                  }
                });
                return refID;
            },
            addNewDataLoader: function(){
              var refID = this.getNextUnusedRef();
              if (refID != null){
                var loader = new RefGeograficaData({id_ref_geografica:refID, is_preloaded:false, data_has_changed: false, valor_etiquetas:{}, ref_geografica_parent_id: this.refGeograficas[refID].parent});
                this.collection.add(loader);
                this.render();
              }
            },
            updateRefsUsed:function(){
              var that = this;
                this.collection.each(function(model){
                    that.collection.refGeograficas[model.get('id_ref_geografica')].used = true;
                });
            },
            getRefGeograficaNames: function(objects){
                var that = this;
                var names = [];
                $.each(objects, function(i, object){
                   names.push(that.collection.refGeograficas[i].desc);
                });
                return names;
            },
            saveNewDataLoaders: function(){
              var dataLoaders = this.prepareDataToSave(this.collection.filter({is_preloaded:false}));
              this.saveDataLoaders(dataLoaders);
            },
            saveDataLoaders: function(modelsData){
              var that = this;
              var url = this.collection.api_urls.edit;
              if (Object.keys(modelsData.objects).length){
                $.ajax(url,{
                    'data': JSON.stringify(modelsData),
                    'type': 'POST',
                    'processData': false,
                    'contentType': 'application/json',
                     success: function(data) {
                        if (data.success){
                          var refGeograficaNames = that.getRefGeograficaNames(modelsData.objects);
                          showSimpleModal(globalModal, 'success', 'Valores GUARDADOS con éxito<br><br> <div class="alert alert-info" role="alert">Se han guardado los valores para: <br> '+constructHTMLList(refGeograficaNames)+ '<br><b>Los datos deberán ser aprobados nuevamente por un Administrador para poder visualizarlos</b></div>');
                          that.saveSuccessCallback(data, modelsData);
                        } else {
                          showSimpleModal(globalModal, 'error', 'ERROR! NO ha sido posible guardar los valores');
                        }
                        //location.reload();
                    },
                    error: function(data) {
                      showSimpleModal(globalModal, 'error', 'ERROR! Ocurrió un error mientras se intentaban guardar los datos');
                    },
                });
              } 
            },
            prepareDataToSave: function(models){
                var saveObjects = {"fecha":this.collection.fecha, "id_indicador":this.collection.id_indicador,"objects":{}};
                $.each(models, function(i, models_object){
                        models_ref_geografica = models_object.toJSON();
                        saveObjects.objects[models_ref_geografica.id_ref_geografica] = [];
                        $.each(models_ref_geografica.valor_etiquetas, function(id_etiqueta, etiqueta_value){
                          var tmpData = {
                            'id_etiqueta': id_etiqueta,
                            'value': etiqueta_value,
                          }
                          saveObjects.objects[models_ref_geografica.id_ref_geografica].push(tmpData);
                        });
                });
                return saveObjects;
            },
            getModelByIDRefGeografica: function(idRefGeografica){
                var foundModel = null;
                this.collection.each(function(model){
                  if (model.get('id_ref_geografica') == idRefGeografica){
                    foundModel = model;
                    return false;
                  }
                });
                return foundModel;
            },
            saveSuccessCallback: function(metadata, models){ // ejecutar cuando se han guardado con éxito los valores
              var that = this;
              $.each(Object.keys(models.objects), function(k, modelIdRef){
                  var model = that.getModelByIDRefGeografica(modelIdRef);
                  if (model && Object.keys(model.get('valor_etiquetas')).length){
                    model.set("is_preloaded", true);
                    model.set("user",metadata.user);
                    model.set("dateModif",metadata.dateModif);
                    model.set("data_has_changed", false);
                  }
              });
              this.render();
            },
            deleteDataLoaders:function(models){
                var data = this.prepareDataToDelete(models);
                var that = this;
                var url = this.collection.api_urls.delete;
                $.ajax(url,{
                  'data': JSON.stringify(data),
                  'type': 'POST',
                  'processData': false,
                  'contentType': 'application/json',
                   success: function(data) {
                      if (data.success){
                        showSimpleModal(globalModal, 'success', 'Valores ELIMINADOS con éxito');
                        that.deleteSuccessCallback(models);
                      } else {
                        showSimpleModal(globalModal, 'error', 'ERROR! NO ha sido posible eliminar los valores');
                      }
                      //location.reload();
                  },
                  error: function(data) {
                    showSimpleModal(globalModal, 'error', 'ERROR! Ocurrió un error mientras se intentaban borrar los datos');
                  },
              });
            },
            prepareDataToDelete: function(models){
                var deleteObjects = {"fecha":this.collection.fecha, "id_indicador":this.collection.id_indicador,"objects":[]};
                  $.each(models, function(i){
                        deleteObjects["objects"].push(models[i].get('id_ref_geografica'));
                  });
                return deleteObjects;
            },
            deleteSuccessCallback: function(models){
              $.each(models, function(i){
                  var modelObject = models[i];
                  this.collection.refGeograficas[modelObject.get("id_ref_geografica")].used = false;
                  this.collection.remove(modelObject);
              });
              this.render();
            },
            contructLabelEtiqueta: function(etiquetasIDList){
              var labels = [];
              var that = this;
              $.each(etiquetasIDList, function(i, et_id){
                labels.push(that.etiquetas_metadata[et_id]);                        
              });
              return labels.join("/");
            },
            formatEtiquetaID: function(etiquetasIDList){
              return etiquetasIDList.join(":");
            }
        })


		var RefGeograficaPanel = Backbone.View.extend({
      //el: '.panel',
    tagName: "div",
    className: "panelLoader",
		template: _.template($('#panelLoader').html()),
    events: {
      "change .refGeogSelect": "refSelected",
      "click .saveDataLoader": "saveObject",
      "click .deleteObject": "deleteObject",
      "change .etiquetaInput": "etiquetaValueChange"
    },
    etiquetaValueChange: function(event){
      var etiquetaId = $(event.target).data('etiqueta-id');
      var value = event.target.value;
      value = (this.parent.value_type == "entero") ? Math.round(value): value;
      value =  (value > this.parent.range_max) ? this.parent.range_max : value;
      value =  (value < this.parent.range_min) ? this.parent.range_min : value;
      var modelEtiquetas = this.model.get('valor_etiquetas');
      modelEtiquetas[etiquetaId] = value;
      this.model.set('valoresEtiquetas',modelEtiquetas);
      if (this.model.get('is_preloaded')){
        this.model.set('data_has_changed', true);
      }
      this.render();
    },
    saveObject: function(){
      var models = [this.model];
      var saveModels = this.parent.prepareDataToSave(models);
      this.parent.saveDataLoaders(saveModels);
    },
    deleteObject: function(){
      var models = [this.model];
      this.parent.deleteDataLoaders(models);
    },
    refSelected: function(event){
        var oldRef = parseInt(this.model.get('id_ref_geografica'));
        var newRef = event.target.value;
        this.model.set('id_ref_geografica',event.target.value);
        this.parent.collection.refGeograficas[oldRef].used = false;
        this.parent.collection.refGeograficas[newRef].used = true;
    },
      initialize: function(options){
        this.parent = options.parent;
        this.etiquetas = options.etiquetas;
        this.refGeograficas = options.refGeograficas;
        this.sortedRefGeograficas = options.sortedRefGeograficas;
        this.filterParentID = options.filterParentID;
      },
      render: function(){
        this.$el.html( this.template({
          parent: this.parent,
          collection:this.parent.collection,
          model:this.model.toJSON(),
          etiquetas:this.etiquetas
        }));
      },
      getTooltipInfo: function(){
        if (this.model.get("user")){
          return "<b>usuario</b>: "+this.model.get("user")+"<br /><b>modif.</b>: "+this.model.get("dateModif");
        }
        return "";
      },
      getRefGeograficasSelect: function(){
        var selectHTML = "";
        var sortedRefGeograficas = this.sortedRefGeograficas;
        var parentCollection = this.parent.collection;
        for (k in sortedRefGeograficas) {
          var nextRef = sortedRefGeograficas[k];
          if (nextRef[0] == this.model.get('id_ref_geografica')){
                      selectHTML += "<option value='"+nextRef[0]+"'' selected>"+nextRef[1].desc+"</option>";
          } else if (!nextRef[1].used && (nextRef[1].parent == parentCollection.filterParentID)) {
            selectHTML += "<option value='"+nextRef[0]+"'>"+nextRef[1].desc+"</option>";
          }

        }
        return selectHTML;
      }
		})


		//////////////////////////////////////////////////////////////////

		function bindRefGeograficaData(refGeograficaCollection, refGeograficasList){
			$.each(valoresEtiquetas, function(idRefGeografica, valoresIndicadorValues) {
    			var ref = new RefGeograficaData({id_ref_geografica:idRefGeografica,is_preloaded:true,
            data_has_changed:false, ref_geografica_parent_id:refGeograficasList[idRefGeografica].parent});
          refGeograficasList[idRefGeografica].used = true;
    			var refData = {};
    			$.each(valoresIndicadorValues, function(index, data) {
    				refData[data.id_etiqueta] =  data.valor;
				});
				ref.set('valor_etiquetas',refData);
        ref.set('user',valoresIndicadorValues[0].user);
        ref.set('dateModif',valoresIndicadorValues[0].dateModif);
				refGeograficaCollection.add(ref);
    		});
		}

  function initLoad(){
    var filterParentDefault = (indicador_ambito == 'D') ? refGeograficasFilters[0].id : 0 ;
    refGeograficaCollection = new RefGeograficaCollection([],{
            refGeograficas: refGeograficasList,
            refGeograficasFilters: refGeograficasFilters,
            filterParentID: filterParentDefault,
            fecha: fecha,
            id_indicador: indicador_id,
            ambito_indicador:indicador_ambito,
            api_urls: api_urls
      });
    bindRefGeograficaData(refGeograficaCollection, refGeograficasList);
    refGeograficaPanelList = new RefGeograficaPanelList({collection:refGeograficaCollection, etiquetas: etiquetas, etiquetas_metadata: etiquetasMetadata, refGeograficasList: refGeograficasList, value_type: value_type, range_min: range_min, range_max: range_max})
    refGeograficaPanelList.render();
  }

		initLoad();

    });

</script>

{% endblock %}